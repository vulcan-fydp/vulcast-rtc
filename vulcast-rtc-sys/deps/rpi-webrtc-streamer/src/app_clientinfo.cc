/*
Copyright (c) 2017, rpi-webrtc-streamer Lyu,KeunChang

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

    * Neither the name of the copyright holder nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#include "app_clientinfo.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <iostream>
#include <vector>

#include "rtc_base/checks.h"
#include "rtc_base/logging.h"

namespace {

const uint32_t kClientIDLength = 8;
const uint32_t kRoomIDLength = 9;
const uint32_t kMaxClientID = 99999999;
const uint32_t kMaxRoomID = 999999999;
const uint64_t kWaitTimeout = 1000;

}  // namespace

////////////////////////////////////////////////////////////////////////////////
//
// AppClientInfo
//
////////////////////////////////////////////////////////////////////////////////
AppClientInfo::AppClientInfo() : state_(ClientState::CLIENT_DISCONNECTED) {}

bool AppClientInfo::Register(int sockid, int room_id, int client_id) {
    webrtc::MutexLock lock(&mutex_);
    RTC_LOG(LS_VERBOSE) << __FUNCTION__ << "WS id: " << sockid << ", Roomid "
                        << room_id << ",Client id: " << client_id;
    RTC_DCHECK(sockid > 0 && room_id > 0 && client_id > 0)
        << "id must be greater then 0";
    switch (state_) {
        case ClientState::CLIENT_REGISTERED:
            if (room_id_ == room_id && client_id_ == client_id) {
                RTC_LOG(LS_WARNING) << "Doing register second times";
                return true;
            }
            return false;  // already registered by another client
        // All other state can be changed to CONNECTED
        case ClientState::CLIENT_DISCONNECTED:
            room_id_ = room_id;
            client_id_ = client_id;
            break;
        default:
            break;
    }
    sockid_ = sockid;

    // this type of request generated by testing page of browser
    if (room_id_ != 0 || client_id_ != 0) {
        RTC_LOG(LS_WARNING)
            << "internal id (room,client) does not cleared correctly"
            << " or, invalid/unknown state transition";
    }
    room_id_ = room_id;
    client_id_ = client_id;

    state_ = CLIENT_REGISTERED;
    return true;
}

bool AppClientInfo::Disconnect(int sockid) {
    webrtc::MutexLock lock(&mutex_);
    RTC_LOG(INFO) << __FUNCTION__ << ": sockid id " << sockid;
    if (sockid_ != sockid) {
        RTC_LOG(INFO) << "sockid does not match.";
        return false;
    };
    switch (state_) {
        case ClientState::CLIENT_REGISTERED:
            state_ = ClientState::CLIENT_DISCONNECTED;
            return true;
        default:
            break;
    }
    return true;
}

bool AppClientInfo::GetSockId(int client_id, int& sockid) {
    RTC_LOG(LS_VERBOSE) << __FUNCTION__ << ":Client id: " << client_id;
    RTC_DCHECK(client_id_ == client_id);
    if (client_id_ == client_id) {
        sockid = sockid_;
        return true;
    }
    return false;
}

bool AppClientInfo::IsRegistered(int sockid) {
    return state_ == ClientState::CLIENT_REGISTERED && sockid_ == sockid;
}

void AppClientInfo::Reset() {
    RTC_LOG(LS_VERBOSE) << __FUNCTION__;
    client_id_ = room_id_ = sockid_ = 0;
    state_ = CLIENT_DISCONNECTED;
}
